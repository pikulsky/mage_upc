<?php
/**
 * Payment process with Upc
 *
 * TODO: validate input data (length, required, etc.)
 * TODO: timezone
 *
 * TODO: send to UPC long data and check result
 *
 */
class Upc
{
	private $pay_request_url;
	private $version;
	private $merchant_id;
	private $terminal_id;
	private $merchant_private_key_path;
	private $upc_public_key_path;

	private $_log_class_method = null;
	private $_log_categories = array('production');

	const UPC_GATEWAY_PROTOCOL_VERSION = '1';
	const MODULE_VERSION = '101';
	
	private $_urls = array(
		'local'			=> 'http://localhost/green/upc',
		'test'			=> 'https://secure.upc.ua/ecgtest/enter',
		'production'	=> 'https://secure.upc.ua/go/enter',
	);

	// errors in data from shop
	const ERROR_MISSED_TOTAL_AMOUNT				= 'error_missed_total_amount';
	const ERROR_INVALID_TOTAL_AMOUNT			= 'error_invalid_total_amount';
	const ERROR_INVALID_CURRENCY				= 'error_invalid_currency';
	const ERROR_INVALID_LOCALE					= 'error_invalid_locale';
	const ERROR_MISSED_ORDER_ID					= 'error_missed_order_id';
	const ERROR_INVALID_ORDER_ID				= 'error_invalid_order_id';
	const ERROR_INVALID_PURCHASE_DESCRIPTION	= 'error_invalid_purchase_description';
	// error in config
	const ERROR_MISSED_MERCHANT_ID		= 'error_missed_merchant_id';
	const ERROR_INVALID_MERCHANT_ID		= 'error_invalid_merchant_id';
	const ERROR_MISSED_TERMINAL_ID		= 'error_missed_terminal_id';
	const ERROR_INVALID_TERMINAL_ID		= 'error_invalid_terminal_id';
	// invalid key paths
	const ERROR_MERCHANT_PRIVATE_KEY_NOT_FOUND	= 'error_merchant_private_key_not_found';
	const ERROR_UPC_PUBLIC_KEY_NOT_FOUND		= 'error_upc_public_key_not_found';

	// errors in data generated by module
	const ERROR_INVALID_VERSION			= 'error_invalid_version';
	const ERROR_MISSED_PURCHASE_TIME	= 'error_missed_purchase_time';
	const ERROR_INVALID_PURCHASE_TIME	= 'error_invalid_purchase_time';
	const ERROR_INVALID_SESSION_DATA	= 'error_invalid_session_data';
	const ERROR_MISSED_SIGNATURE		= 'error_missed_signature';
	const ERROR_INVALID_SIGNATURE		= 'error_invalid_signature';

	/**
	 *
	 * @param array $config configuration settings
	 */
	public function __construct($config, $config_file_path = null)
	{
		// process configs
		$config = $this->_get_config($config, $config_file_path);
		// logging settings
		$this->_log_class_method = $this->iVal($config, 'log_class_method', null);
		// logging categories
		list($this->_log_categories, $unknown_log_categories) = $this->_get_config_log_categories($config);
		if (!empty($unknown_log_categories)) {
			// unknown value in config is for 'error' log category
			$this->_log('error', 'Unknown log category(s):'. implode(',', $unknown_log_categories));
		}
		$this->_log('config', $config);

		// the current version of UPC gateway
		$this->version =  self::UPC_GATEWAY_PROTOCOL_VERSION;
		// merchant data
		$this->merchant_id					= $this->iVal($config, 'merchant_id');
		$this->terminal_id					= $this->iVal($config, 'terminal_id');
		$this->merchant_private_key_path	= $this->iVal($config, 'merchant_private_key_path');
		$this->upc_public_key_path			= $this->iVal($config, 'upc_public_key_path');
		
		// request url depends on mode (test or production) 
		$mode = $this->iVal($config, 'mode', 'test');
		if ('production' != $mode) {
			if ('local' != $mode) {// TODO remove this
				$mode  = 'test';
			}
		}
		$this->pay_request_url = $this->_urls[$mode];
	}

	/**
	 * Starts payment transaction: creates payment request
	 * and redirects user to UPC payment server.
	 *
	 * @param array $order order data:
	 * array(
	 *	'total_amount'	=> $total_amount,
	 *	'currency_id'	=> 978|840|643|980 = ISO codes for: 'EUR','USD','RUB','UAH'
	 *	'locale'		=> 'RU'|'EN'|'UA',
	 *	'order_id'		=> $order_id,
	 *	'description'	=> $description, (optional)
	 *	'session_id'	=> $session_id, (optional)
	 * );
	 * @param array $render render data:
	 * array(
	 *	'submit_text'	=> string,
	 *	'submit_attr'	=> string
	 * );
	 */
	public function process_request($order, $render = array())
	{
		$this->_log('from_shop', 'order from shop', array('order' => $order, 'render' => $render));

		// TODO: validate $render

		$session_data	= $this->iVal($order, 'session_id', session_id());
		$locale			= strtolower($this->iVal($order, 'locale', 'ru'));

		// TODO validate $purchase_description should be UTF-8

		$data = array(
			'pay_request_url'		=> $this->pay_request_url,
			'version'				=> $this->version,
			'merchant_id'			=> $this->merchant_id,
			'terminal_id'			=> $this->terminal_id,
			'total_amount'			=> $this->iVal($order, 'total_amount'),
			'currency_id'			=> $this->iVal($order, 'currency_id'),
			'locale'				=> $locale,
			'order_id'				=> $this->iVal($order, 'order_id'),
			'purchase_time'			=> $this->_get_purchase_time(),
			'purchase_description'	=> $this->iVal($order, 'description'),
			'session_data'			=> $session_data,
		);

		// validate data
		$errors = $this->validate($data);
		if (!empty($errors)) {
			$this->_log('error', 'validation', $errors);
			//$configuration_error = $this->iVal($render, 'configuration_error_message', 'configuration_error_message');
			$errors = $this->get_error_description($errors);
			return 'ERROR:'.  implode(',', $errors);
		}

		// calculate signature
		$data['signature'] = $this->_get_signature($data);

		// TODO validate signature

		$view = $this->_prepare_request_view($data, $render);

		$this->_log('to_shop', 'payment form to shop', $view);
		return $view;
	}

	/**
	 *
	 * @param type $data
	 * @param array $render render data:
	 * array(
	 *	'submit_text'	=> string,
	 *	'submit_attr'	=> string
	 * );
	 * @return string
	 */
	protected function _prepare_request_view($data, $render)
	{
		$submit_text = $this->iVal($render, 'submit_text');
		$submit_text = trim($submit_text);
		if (!empty($submit_text)) {
			$submit_text = 'value="' . $submit_text . '"';
		}
		$submit_attr = $this->iVal($render, 'submit_attr');
		$submit_attr = trim($submit_attr);
		// glue submit pieces
		$submit_html = implode(' ', array(
			$submit_text,
			$submit_attr
		));
		$submit_html = trim($submit_html);

		if (!empty($submit_html)) {
			$submit_html .= ' ';
		}
		$form_attr = $this->iVal($render, 'form_attr');
		$form_attr = trim($form_attr);
		if (!empty($form_attr)) {
			$form_attr .= ' ';
		}


		// TODO: unit test: html is valid when $submit_text and $submit_attr
		// are specified or not.

		$view =
			'<form '. $form_attr . 'action="' . $data['pay_request_url'] . '" method="post">'.
			'<input type="hidden" name="Version" value="' . $data['version'] . '" />'.
			'<input type="hidden" name="MerchantID" value="' . $data['merchant_id'] . '" />'.
			'<input type="hidden" name="TerminalID" value="' . $data['terminal_id'] . '" />'.
			'<input type="hidden" name="TotalAmount" value="' . $data['total_amount'] . '" />'.
			'<input type="hidden" name="Currency" value="' . $data['currency_id'] . '" />'.
			'<input type="hidden" name="locale" value="' . $data['locale'] . '" />'.
			'<input type="hidden" name="SD" value="' . $data['session_data'] . '" />'.
			'<input type="hidden" name="OrderID" value="' . $data['order_id'] . '" />'.
			'<input type="hidden" name="PurchaseTime" value="' . $data['purchase_time'] . '" />'.
			'<input type="hidden" name="PurchaseDesc" value="' . $data['purchase_description'] . '" />'.
			'<input type="hidden" name="Signature" value="' . $data['signature'] . '" />'.
			'<input type="submit" '. $submit_html . '/>'.
			'</form>';
		return $view;
	}

	/**
	 * Checks payment transaction.
	 * Checks signature.
	 * Logs payment transaction result
	 */
	public function process_response()
	{
		$data = $_POST;
		$this->_log('from_upc', 'processing response from upc', array('data' => $data));

		$is_signature_valid = $this->_check_signature($data);

		$transaction_code	= $this->iVal($data, 'TranCode');
		//$is_delay = $data['Delay'];

		// description for error
		$error_text = $this->_get_upc_error_message($transaction_code);

		$result = array(
			'is_signature_valid'=> $is_signature_valid,
			'merchant_id'		=> $this->iVal($data, 'MerchantID'),
			'terminal_id'		=> $this->iVal($data, 'TerminalID'),
			// order data
			'order_id'			=> $this->iVal($data, 'OrderID'),
			'session_data'		=> $this->iVal($data, 'SD'),
			'currency_id'		=> $this->iVal($data, 'Currency'),
			'total_amount'		=> $this->iVal($data, 'TotalAmount'),
			'purchase_time'		=> $this->iVal($data, 'PurchaseTime'),
			// upc data
			'transaction_id'	=> $this->iVal($data, 'XID'),
			'approval_code'		=> $this->iVal($data, 'ApprovalCode'), // only for success
			'reference_number'	=> $this->iVal($data, 'Rrn'),
			'proxy_pan'			=> $this->iVal($data, 'ProxyPan'),
			'transaction_code'	=> $transaction_code,
			'error_text'		=> $error_text,
		);

		$this->_log('to_shop', 'processed response to shop', $result);

		return $result;
	}

	protected function _prepare_callback_response($data, $result)
	{
		// TODO: validate $data
		// TODO: validate $result

		$callback_data = array(
			'MerchantID'		=> $this->iVal($data, 'merchant_id'),
			'TerminalID'		=> $this->iVal($data, 'terminal_id'),
			'TotalAmount'		=> $this->iVal($data, 'total_amount'),
			'PurchaseTime'		=> $this->iVal($data, 'purchase_time'),
			'OrderID'			=> $this->iVal($data, 'order_id'),
			'XID'				=> $this->iVal($data, 'transaction_id'),
			'SD'				=> $this->iVal($data, 'session_data'),
			'ApprovalCode'		=> $this->iVal($data, 'approval_code'), // only for success
			'Rrn'				=> $this->iVal($data, 'reference_number'),
			'ProxyPan'			=> $this->iVal($data, 'proxy_pan'),
			'TranCode'			=> $this->iVal($data, 'transaction_code'),
			'Currency'			=> $this->iVal($data, 'currency_id'),

			// TODO: 'Delay'
		);

		$data = array_merge($callback_data, $result);

		$response = array();
		foreach ($data as $key => $value) {
			$response[] = $key.'='.$value;
		}
		$response = implode("\n", $response);
		return $response;
	}

	protected function _log($log_category, $title, $data = null)
	{
		if (in_array($log_category, $this->_log_categories)) {

			if (is_array($title) && empty($data)) {
				$data = $title;
				$title = '';
			}
			$data = empty($data) ? '' : var_export($data, true);
			$title = empty($title) ? ' ' : ' ['.$title.'] ';
			
			$message = '['.$log_category.']'.$title.$data;

			if (!is_null($this->_log_class_method)) {
				call_user_func($this->_log_class_method, $message);
			}
			else {
				error_log($message);
			}
		}
	}

	//-----------------
	// Callback methods
	//

	public function approve_payment($data)
	{
		$this->_log('from_shop', 'approve callback from shop', $data);

		$result = array(
			'Response.action'		=> 'approve', // approve | reverse
			'Response.reason'		=> '',
			'Response.forwardUrl'	=> $this->iVal($data, 'forward_url'),
		);
		$response = $this->_prepare_callback_response($data, $result);

		$this->_log('to_upc', 'approve callback to upc', $response);

		echo $response;
		exit;
	}

	public function reject_payment($data, $reason)
	{
		$this->_log('from_shop', 'reject callback from shop', array('data' => $data, 'reason' => $reason));

		$result = array(
			'Response.action'		=> 'reverse', // approve | reverse
			'Response.reason'		=> $reason,
			'Response.forwardUrl'	=> $this->iVal($data, 'forward_url'),
		);
		$response = $this->_prepare_callback_response($data, $result);

		$this->_log('to_upc', 'reject callback to upc', $response);

		echo $response;
		exit;
	}

	public function get_callback_data()
	{
		$data = $_POST;
		$this->_log('from_upc', 'callback from upc', $data);

		$is_signature_valid = $this->_check_signature($data);

		$transaction_code	= $this->iVal($data, 'TranCode');

		$error_text = $this->_get_upc_error_message($transaction_code);

		$data = array(
			'is_signature_valid'=> $is_signature_valid,
			'merchant_id'		=> $this->iVal($data, 'MerchantID'),
			'terminal_id'		=> $this->iVal($data, 'TerminalID'),

			'order_id'			=> $this->iVal($data, 'OrderID'),
			'total_amount'		=> $this->iVal($data, 'TotalAmount'),
			'currency_id'		=> $this->iVal($data, 'Currency'),
			'purchase_time'		=> $this->iVal($data, 'PurchaseTime'),
			'session_data'		=> $this->iVal($data, 'SD'),
			'email'				=> $this->iVal($data, 'Email'),

			'approval_code'		=> $this->iVal($data, 'ApprovalCode'), // only for success
			'reference_number'	=> $this->iVal($data, 'Rrn'),
			'proxy_pan'			=> $this->iVal($data, 'ProxyPan'),
			'transaction_code'	=> $transaction_code,
			'transaction_id'	=> $this->iVal($data, 'XID'),
			'error_text'		=> $error_text,
		);

		$this->_log('to_shop', 'callback to shop', $data);

		return $data;
	}

	protected function _get_upc_error_message($error_code)
	{
		$msg = array(
			// Коды на основе ответов авторизацинного хоста банка
			'000'	=> 'Сделка авторизована',

			// Ошибки, связанные с картой
			'105'	=> 'Транзакция не разрешена банком-эмитентом',
			'116'	=> 'Недостаточно средств',
			'111'	=> 'Несуществующая карта',
			'108'	=> 'Карта утеряна или украдена',
			'101'	=> 'Неверный срок действия карты',
			'130'	=> 'Превышен допустимый лимит расходов',

			// Ошибки, связанные с банком
			'290'	=> 'Банк-издатель недоступен',
			'291'	=> 'Техническая или коммуникационная проблема',

			// Коды на основе ответов генерируемых платежным сервером
			// без обращения к хосту банка
			'401'	=> 'Ошибки формата',
			'402'	=> 'Ошибки в параметрах Acquirer/Merchant',
			'403'	=> 'Ошибки при соединении с ресурсом платежной системы (DS)',
			'404'	=> 'Ошибка аутентификации покупателя',
			'405'	=> 'Ошибка подписи',
			'406'	=> 'Превышена квота разрешенных транзакций',
			'407'	=> 'Торговец отключен от шлюза',
			'408'	=> 'Транзакция не найдена',
			'409'	=> 'Несколько транзакций найдено',
			'410'	=> 'Заказ уже был успешно оплачен',
			'411'	=> 'Некорректное время в запросе',
			'412'	=> 'Параметры заказа уже были получены ранее',
			'420'	=> 'Превышен лимит дневной лимит транзакций',
			'421'	=> 'Превышена максимально разрешенная сумма транзакции',
			'430'	=> 'Транзакция запрещена на уровне платежного шлюза',
			'431'	=> 'Не разрешена транзакция без полной аутентификации по схеме 3-D Secure',

			'501'	=> 'Транзакция отменена пользователем',
			'502'	=> 'Сессия браузера устарела',
			'503'	=> 'Транзакция отменена магазином',
			'504'	=> 'Транзакция отменена шлюзом',

			'601'	=> 'Транзакция не завершена',
		);
		$unknown_error = 'Неизвестная ошибка';
		if (!empty($error_code)) {
			$unknown_error .= ' (код: '.$error_code.')';
		}
		$error_text = $this->iVal($msg, $error_code, $unknown_error);
		return $error_text;
	}

	/**
	 * Checks data signature
	 * @param array $data
	 * @return bool true if signature is correct
	 */
	protected function _check_signature($data)
	{
		$signature = $this->iVal($data, 'Signature');
		$signature = base64_decode($signature);

		$merchant_id		= $this->iVal($data, 'MerchantID');
		$terminal_id		= $this->iVal($data, 'TerminalID');
		$purchase_time		= $this->iVal($data, 'PurchaseTime');
		$order_id			= $this->iVal($data, 'OrderID');
		$currency_id		= $this->iVal($data, 'Currency');
		$amount				= $this->iVal($data, 'TotalAmount');
		$session_data		= $this->iVal($data, 'SD');
		$approval_code		= $this->iVal($data, 'ApprovalCode');
		$xid				= $this->iVal($data, 'XID');
		$transaction_code	= $this->iVal($data, 'TranCode');

		// TODO add optional fields:
		//	Delay
		//	AltTotalAmount
		//	AltCurrency

		// signed data, fields:
		// MerchantId;TerminalId;PurchaseTime;OrderId,Delay;Xid;
		// CurrencyId,AltCurrencyId;Amount,AltAmount;
		// SessionData;TranCode;ApprovalCode;
		$signature_data = "$merchant_id;$terminal_id;".
			"$purchase_time;$order_id;".
			"$xid;$currency_id;$amount;$session_data;".
			"$transaction_code;$approval_code;";

		// get certificate
		$fp = fopen($this->upc_public_key_path, 'r');
		$certificate = fread($fp, 8192);
		fclose($fp);

		// 1 if the signature is correct, 0 if it is incorrect, and -1 on error.
		$ok = openssl_verify($signature_data, $signature, $certificate);
		return (1 == $ok);
	}

	/**
	 * Returns purchase time in format:
	 * yyMMddHHmmss or yyMMddHHmmssZ,
	 * where:
	 * Z - time zone (RFC 822): [+|-]HHMM, e.g.: +0300, -0200
	 */
	protected function _get_purchase_time()
	{
		// TODO config value: isUseTimeZone

		$purchase_time = date('ymdHis');
		return $purchase_time;
	}

	/**
	 * Creates signature for the given data
	 * and returns it in base64 format
	 * @param array $data order data
	 */
	protected function _get_signature($data)
	{
		$merchant_id	= $this->iVal($data, 'merchant_id');
		$terminal_id	= $this->iVal($data, 'terminal_id');
		$purchase_time	= $this->iVal($data, 'purchase_time');
		$order_id		= $this->iVal($data, 'order_id');
		$currency_id	= $this->iVal($data, 'currency_id');
		$total_amount	= $this->iVal($data, 'total_amount');
		$session_data	= $this->iVal($data, 'session_data');

		// data to be signed, fields:
		// MerchantId;TerminalId;PurchaseTime;OrderId,Delay;CurrencyId,AltCurrencyId;Amount,AltAmount;SessionData(SD);
		$signature_data = "$merchant_id;$terminal_id;$purchase_time;".
			"$order_id;$currency_id;$total_amount;$session_data;";

		$fp = fopen($this->merchant_private_key_path, 'r');
		$private_key = fread($fp, 8192);
		fclose($fp);
		$private_key_id = openssl_get_privatekey($private_key);
		$result = openssl_sign($signature_data, $signature, $private_key_id);
		openssl_free_key($private_key_id);
		$base64_signature = base64_encode($signature);
		return $base64_signature;
	}

	//-----------------------------------------------------------
	//					C O N F I G
	//-----------------------------------------------------------

	protected function _get_config($config, $config_file_path)
	{
		// if config file exists, then load settings from file;
		$config_file = array();
		if (!is_null($config_file_path) && file_exists($config_file_path)) {
			// load config file
			$config_file = include($config_file_path);
		}
		// settings from file are higher priority than settings from constructor's parameter,
		// so settings from file override settings from constructor's parameter:
		if (!empty($config_file) && is_array($config_file)) {
			$config = array_merge($config, $config_file);
		}
		return $config;
	}

	protected function _get_config_log_categories($config)
	{
		// Logging categories could be specified in config:
		// $config = array(
		//		'log_categories' => array('config','production'),
		//		...
		// );
		// Available logging categories:
		//		none		- nothing is logged, NOTE: no other categories should be specified to disable logging,
		//		all			- everything is logged,
		//		production	- errors and transaction's result are logged,
		//		from_shop	- errors and input data from shop are logged,
		//		to_shop		- errors and output data to shop are logged,
		//		from_upc	- errors and input data from UPC are logged,
		//		to_upc		- errors and output data to UPC are logged,
		//		config		- errors and config settings are logged,
		// If unknown logging category is specified, then it's skipped,
		// and this unknown logging category value is logged as error.
		// Default and recommended is "production".

		// group of 'all' logging categories
		$all_log_categories = array(
			'production',
			'from_shop',
			'to_shop',
			'from_upc',
			'to_upc',
			'config',
		);
		// allowed logging categories
		$allowed_log_categories = array_merge($all_log_categories, array(
				'none',
				'all',
		));

		$log_categories = $this->iVal($config, 'log_categories', array('production'));
		$unknown_log_categories = array_diff($log_categories, $allowed_log_categories);

		// if 'none' is not specified, then add 'error' category,
		// since any other categories assume errors are logged
		if (!in_array('none', $log_categories)) {
			$log_categories[] = 'error';
		}
		// if 'all' is specified, then add categories from 'all' group
		if (in_array('all', $log_categories)) {
			$log_categories = array_merge($log_categories, $all_log_categories);
		}
		return array($log_categories, $unknown_log_categories);
	}

	//-----------------------------------------------------------
	//					H E L P E R S
	//-----------------------------------------------------------

	protected function iVal($data, $field, $default = '')
	{
		$result = $default;
		if (isset($data[$field])) {
			$result = $data[$field];
		}
		return $result;
	}

	//-----------------------------------------------------------
	//					VALIDATION, ERRORS
	//-----------------------------------------------------------

	protected function validate($data)
	{
		$result = array();

		if ($this->is_field_empty($data, 'order_id')) {
			$result[] = self::ERROR_MISSED_ORDER_ID;
		}
		if ($this->is_field_empty($data, 'merchant_id')) {
			$result[] = self::ERROR_MISSED_MERCHANT_ID;
		}
		if ($this->is_field_empty($data, 'terminal_id')) {
			$result[] = self::ERROR_MISSED_TERMINAL_ID;
		}
		if ($this->is_field_empty($data, 'total_amount')) {
			$result[] = self::ERROR_MISSED_TOTAL_AMOUNT;
		}
		if (!file_exists($this->merchant_private_key_path)) {
			$result[] = self::ERROR_MERCHANT_PRIVATE_KEY_NOT_FOUND;
		}
		if (!file_exists($this->upc_public_key_path)) {
			$result[] = self::ERROR_UPC_PUBLIC_KEY_NOT_FOUND;
		}
		// if currency is invalid or empty, then currency_id is empty
		if ($this->is_field_empty($data, 'currency_id')) {
			$result[] = self::ERROR_INVALID_CURRENCY;
		}
		if (!$this->is_field_in_array($data, 'locale', array('ru', 'en', 'uk'))) {
			$result[] = self::ERROR_INVALID_LOCALE;
		}
		return $result;
	}

	protected function is_field_in_array($data, $field, $available_values)
	{
		$value = $this->iVal($data, $field);
		return in_array($value, $available_values);
	}

	protected function is_field_empty($data, $field)
	{
		$value = $this->iVal($data, $field);
		return empty($value);
	}

	public function get_error_description($errors)
	{
		$descriptions = array(
			self::ERROR_MISSED_TOTAL_AMOUNT				=> 'missed total amount',
			self::ERROR_INVALID_TOTAL_AMOUNT			=> 'invalid total amount',
			self::ERROR_INVALID_CURRENCY				=> 'invalid currency',
			self::ERROR_INVALID_LOCALE					=> 'invalid locale',
			self::ERROR_MISSED_ORDER_ID					=> 'missed order id',
			self::ERROR_INVALID_ORDER_ID				=> 'invalid order id',
			self::ERROR_INVALID_PURCHASE_DESCRIPTION	=> 'invalid purchase description',
		// error in config
			self::ERROR_MISSED_MERCHANT_ID		=> 'missed merchant id',
			self::ERROR_INVALID_MERCHANT_ID		=> 'invalid merchant id',
			self::ERROR_MISSED_TERMINAL_ID		=> 'missed terminal id',
			self::ERROR_INVALID_TERMINAL_ID		=> 'invalid terminal id',
		// invalid key paths
			self::ERROR_MERCHANT_PRIVATE_KEY_NOT_FOUND	=> 'merchant private key not found',
			self::ERROR_UPC_PUBLIC_KEY_NOT_FOUND		=> 'upc public key not found',

		// errors in data generated by module
			self::ERROR_INVALID_VERSION			=> 'invalid version',
			self::ERROR_MISSED_PURCHASE_TIME	=> 'missed purchase time',
			self::ERROR_INVALID_PURCHASE_TIME	=> 'invalid purchase time',
			self::ERROR_INVALID_SESSION_DATA	=> 'invalid session data',
			self::ERROR_MISSED_SIGNATURE		=> 'missed signature',
			self::ERROR_INVALID_SIGNATURE		=> 'invalid signature',
		);
		$errors_descriptions = array();
		foreach ($errors as $error) {
			$errors_descriptions[] = $descriptions[$error];
		}
		return $errors_descriptions;
	}
}